---
import sendgridMail from "@sendgrid/mail"

import { htmlGenerator, textGenerator } from "@/components/emails/template"
import Checkbox from "@/components/ui/Checkbox.astro"
import Input from "@/components/ui/Input.astro"
import type { Option } from "@/components/ui/Select.astro"
import Select from "@/components/ui/Select.astro"
import { getI18N } from "@/i18n"

const { currentLocale } = Astro
const i18n = getI18N({ currentLocale })

const options: Record<string, string> = {
	check: i18n.CONTACT.FORM.SERVICE_CHOICES.CHECK,
	petcare: i18n.CONTACT.FORM.SERVICE_CHOICES.PET_CARE,
	exams: i18n.CONTACT.FORM.SERVICE_CHOICES.EXAMS,
	other: i18n.CONTACT.FORM.SERVICE_CHOICES.OTHERS,
}

const choices: Option[] = Object.entries(options).map(([key, value]) => ({
	value: key,
	label: value,
}))

sendgridMail.setApiKey(import.meta.env.SENDGRID_API_KEY)

const formSubmittedResponse = {
	success: false,
	error: false,
}

if (Astro.request.method === "POST") {
	try {
		const formData = await Astro.request.formData()
		const username = formData.get("username") as string
		const email = formData.get("email") as string
		const phone = formData.get("phone") as string
		const serviceKey = formData.get("service") as string
		const service = options[serviceKey] ?? "No se ha especificado un servicio"
		const catName = formData.get("petname") as string
		const catAge = formData.get("petage") as string
		const message = formData.get("message") as string
		const needVideoCall = Boolean(formData.get("checkbox"))

		if (!username || !email || !phone) {
			formSubmittedResponse.error = true
			return
		}

		const msg: sendgridMail.MailDataRequired | sendgridMail.MailDataRequired[] = {
			from: {
				name: "Feline Vets Contacto",
				email: "no-reply@em666.felinevets.com.co",
			},
			to: ["felinevetsco@gmail.com", "web.christian.dev@gmail.com"],
			subject: "Â¡Nueva consulta desde el formulario de contacto!",
			html: htmlGenerator({
				username,
				email,
				phone,
				service,
				catName,
				catAge,
				message,
				videoCall: needVideoCall,
			}),
			text: textGenerator({
				username,
				email,
				phone,
				service,
				catName,
				catAge,
				message,
				videoCall: needVideoCall,
			}),
		}

		await sendgridMail.send(msg)

		formSubmittedResponse.success = true
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message)
			formSubmittedResponse.error = true
		}
	}
}
---

<form
	method="POST"
	class="contact flex flex-col gap-y-3.5 md:gap-y-5"
	aria-label={i18n.CONTACT.FORM.ARIA_LABEL}
>
	<div class="flex flex-col gap-x-0 gap-y-3.5 md:gap-y-5 lg:flex-row lg:gap-x-5 lg:gap-y-0">
		<Input
			type="text"
			maxlength="256"
			minlength="1"
			name="username"
			id="username"
			placeholder={i18n.CONTACT.FORM.USERNAME.PLACEHOLDER}
			required
			oninvalid={`this.setCustomValidity("${i18n.CONTACT.FORM.USERNAME.ERROR}")`}
			oninput="this.setCustomValidity('')"
		/>
		<Input
			type="email"
			maxlength="256"
			minlength="1"
			name="email"
			id="email"
			placeholder={i18n.CONTACT.FORM.EMAIL.PLACEHOLDER}
			required
			oninvalid={`this.setCustomValidity("${i18n.CONTACT.FORM.EMAIL.ERROR}")`}
			oninput="this.setCustomValidity('')"
		/>
	</div>
	<div class="flex flex-col gap-x-0 gap-y-5 lg:flex-row lg:gap-x-5 lg:gap-y-0">
		<Input
			type="tel"
			minlength="7"
			maxlength="15"
			name="phone"
			id="phone"
			placeholder={i18n.CONTACT.FORM.PHONE.PLACEHOLDER}
			required
			oninvalid={`this.setCustomValidity("${i18n.CONTACT.FORM.PHONE.ERROR}")`}
			oninput="this.setCustomValidity('')"
		/>
		<Select
			options={choices}
			id="service"
			name="service"
			placeholder={i18n.CONTACT.FORM.SERVICE.PLACEHOLDER}
		/>
	</div>
	<div class="flex flex-col gap-x-0 gap-y-5 lg:flex-row lg:gap-x-5 lg:gap-y-0">
		<Input
			type="text"
			maxlength="256"
			name="petname"
			id="petname"
			placeholder={i18n.CONTACT.FORM.PET_NAME.PLACEHOLDER}
		/>
		<Input
			type="text"
			maxlength="256"
			name="petage"
			id="petage"
			placeholder={i18n.CONTACT.FORM.PET_AGE.PLACEHOLDER}
		/>
	</div>
	<div class="flex flex-col gap-x-0 gap-y-5 lg:flex-row lg:gap-x-5 lg:gap-y-0">
		<textarea
			class="my-0 h-auto min-h-48 w-full rounded-[14px] border-[1.5px] border-solid border-secondary bg-transparent px-3.5 py-2.5 text-base font-semibold transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-neutral-500 focus:border-tertiary focus:outline-0 disabled:cursor-not-allowed disabled:opacity-50 sm:px-6 md:text-lg md:leading-8"
			minlength="1"
			name="message"
			id="message"
			maxlength="5000"
			placeholder={i18n.CONTACT.FORM.MESSAGE.PLACEHOLDER}
			required
			oninvalid={`this.setCustomValidity("${i18n.CONTACT.FORM.MESSAGE.ERROR}")`}
			oninput="this.setCustomValidity('')"
		>
		</textarea>
	</div>
	<div
		class="mt-0 flex flex-col items-stretch justify-center gap-y-6 md:mt-5 md:flex-row md:items-center md:justify-between"
	>
		<div class="flex items-center justify-center gap-x-3.5 md:justify-start">
			<Checkbox id="checkbox" name="checkbox" />
			<span class="text-base font-normal leading-7 text-neutral-700"
				>{i18n.CONTACT.FORM.CHECKBOX}</span
			>
		</div>
		<input
			type="submit"
			class="inline-block cursor-pointer rounded-[10px] border-0 bg-tertiary px-6 py-3.5 text-center font-title text-lg font-bold leading-[1.875rem] tracking-[.02rem] text-white transition-all duration-300 ease-in-out hover:bg-secondary hover:[outline:0]"
			value={i18n.CONTACT.FORM.SUBMIT}
		/>
	</div>
</form>
<script is:inline define:vars={{ formSubmittedResponse, i18n }}>
	if (formSubmittedResponse.success) {
		window.toast({
			title: i18n.CONTACT.FORM.SUCCESS,
			location: "bottom-center",
			dismissible: false,
			type: "success",
			icon: true,
		})
	} else if (formSubmittedResponse.error) {
		window.toast({
			title: i18n.CONTACT.FORM.ERROR,
			location: "bottom-center",
			dismissible: false,
			type: "error",
			icon: true,
		})
	}
</script>
