---
import HeaderLogo from "@/components/HeaderLogo.astro"
import MobileMenuButton from "@/components/MobileMenuButton.astro"
import MobileMenuContent from "@/components/MobileMenuContent.astro"
import NavigationLink from "@/components/NavigationLink.astro"
import PrimaryButton from "@/components/PrimaryButton.astro"
import { getI18N } from "@/i18n"
import { getLangFromUrl, useTranslatedPath, useTranslations } from "@/i18n/utils"

export interface Page {
	name: string
	href: string
	disabled?: boolean
}

const { currentLocale } = Astro
const i18n = getI18N({ currentLocale })

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
const translatePath = useTranslatedPath(lang)

const pages: Page[] = [
	{ name: t("nav.services"), href: "#Services" },
	{ name: t("nav.features"), href: "#Feature" },
	{ name: t("nav.testimonials"), href: "#Testimonial" },
	{ name: t("nav.team"), href: "#Our-Team" },
	{ name: t("nav.pricing"), href: "#Pricing" },
]
---

<div class="fixed bottom-auto left-0 right-0 top-0 z-50">
	<div
		id="navbar"
		class="w-nav relative z-[500] flex items-center justify-center py-7.5 [transition:height_0.5s_ease,_background-color_0.5s_ease] lg:z-[1000] lg:py-6"
		style="will-change: width, height, background; width: 100%; height: var(--height-initial-navbar); background-color: rgba(255, 250, 226, 0);"
	>
		<div class="flex w-full max-w-full items-center justify-between px-7.5 lg:max-w-navbar">
			<HeaderLogo
				anchorClassNames="relative float-left flex w-auto items-center justify-start pl-0 lg:hidden"
				href={translatePath("/")}
				ariaLabel={i18n.HEADER.LOGO}
				ariaCurrent="page"
				isMobile
			/>
			<div
				id="mobile-menu-overlay"
				class="fixed bottom-0 left-0 right-0 top-0 z-1 h-screen w-full bg-[rgba(0,0,0,.7)] p-0"
				style="display: none; opacity:0;"
			>
			</div>
			<nav
				role="navigation"
				class="relative float-right hidden w-full translate-x-0 translate-y-0 items-center justify-center lg:flex"
			>
				<div class="flex w-full items-center justify-between gap-7.5">
					<HeaderLogo
						href={translatePath("/")}
						ariaLabel={i18n.HEADER.LOGO}
						ariaCurrent="page"
						anchorClassNames="flex max-w-full items-center"
					/>
					<div class="flex items-center justify-center gap-x-14 text-center">
						{
							pages.map(({ name, href }, key) => (
								<NavigationLink
									href={href}
									name={name}
									id={`navigation-link-${key}`}
									className="nav-link mx-auto"
								/>
							))
						}
					</div>
					<div class="flex items-center gap-x-5">
						<PrimaryButton href="#Contact"> {t("nav.contact")} </PrimaryButton>
					</div>
				</div>
			</nav>
			<!-- Mobile Menu Button -->
			<MobileMenuButton
				aria-label={i18n.HEADER.MOBILE_MENU_ICON.LABEL}
				alt={i18n.HEADER.MOBILE_MENU_ICON.ALT}
			/>
		</div>
		<div
			id="shadow-nav"
			class="absolute bottom-0 left-0 right-0 top-0 -z-1 h-full w-full bg-bg-primary shadow-nav [transition:opacity_0.5s_ease]"
			style="will-change: opacity; opacity: 0;"
		>
		</div>
		<MobileMenuContent
			headerLogoHref={translatePath("/")}
			headerLogoAriaLabel={i18n.HEADER.LOGO}
			buttonText={t("nav.contact")}
			pages={pages}
		/>
	</div>
</div>
<style>
	.w-nav::before,
	.w-nav::after {
		content: " ";
		grid-area: 1 / 1 / 2 / 2;
		display: table;
	}

	#mobile-menu-overlay {
		transition: opacity 0.5s ease;
	}
</style>
<script is:inline data-astro-rerun>
	let lastScrollTop = 0
	const minNavbarHeight = 130
	const maxNavbarHeight = 160

	function handleScroll() {
		const navbar = document.getElementById("navbar")
		const shadowNav = document.getElementById("shadow-nav")
		const initialNavbarHeight = navbar?.offsetHeight

		const st = document.body.scrollTop || document.documentElement.scrollTop

		const isScrollingUp = st < lastScrollTop

		let newNavbarHeight, opacity
		if (isScrollingUp && st > minNavbarHeight) {
			newNavbarHeight = minNavbarHeight
			opacity = 1
		} else if (isScrollingUp && st <= minNavbarHeight) {
			newNavbarHeight = Math.min(
				maxNavbarHeight,
				Math.max(minNavbarHeight, initialNavbarHeight - (st - minNavbarHeight))
			)
			opacity = Math.max(
				0,
				1 - (newNavbarHeight - minNavbarHeight) / (maxNavbarHeight - minNavbarHeight)
			)
		} else {
			newNavbarHeight = Math.max(minNavbarHeight, initialNavbarHeight - (st - lastScrollTop))
			opacity = Math.max(
				0,
				1 - (newNavbarHeight - minNavbarHeight) / (maxNavbarHeight - minNavbarHeight)
			)
		}

		if (navbar && shadowNav) {
			navbar.style.height = `${newNavbarHeight}px`
			navbar.style.backgroundColor = `rgba(255, 250, 226, ${opacity})`
			shadowNav.style.opacity = `${opacity}`
		}

		lastScrollTop = st <= 0 ? 0 : st
	}

	document.addEventListener("astro:page-load", () => {
		const mobileMenuButton = document.querySelector(".w-nav-button")
		const overlay = document.getElementById("mobile-menu-overlay")
		const navbarOverlayWrapper = document.getElementById("w-nav-overlay-0")
		const navbarOverlayInner = document.getElementById("w-nav-inner-0")
		document.body.addEventListener("scroll", handleScroll)
		mobileMenuButton.addEventListener("click", () => {
			if (overlay.style.display === "none") {
				overlay.style.display = "flex"
				navbarOverlayWrapper.style.display = "block"
				navbarOverlayWrapper.style.height = `${overlay.scrollHeight}px`
				navbarOverlayInner.style.height = `${overlay.scrollHeight}px`
				navbarOverlayInner.style.transform = "translateX(0%) translateY(0%)"

				setTimeout(() => {
					overlay.style.opacity = "1"
				}, 10)
			} else {
				navbarOverlayInner.style.transform = "translateX(100%) translateY(0%)"
				setTimeout(() => {
					navbarOverlayWrapper.style.height = "auto"
					navbarOverlayWrapper.style.display = "none"
					overlay.style.display = "none"
					overlay.style.opacity = "0"
				}, 500)
			}
		})

		overlay.addEventListener("click", (event) => {
			if (event.target === overlay) {
				navbarOverlayInner.style.transform = "translateX(100%) translateY(0%)"

				setTimeout(() => {
					navbarOverlayWrapper.style.height = "auto"
					navbarOverlayWrapper.style.display = "none"
					overlay.style.display = "none"
					overlay.style.opacity = "0"
				}, 500)
			}
		})
	})

	window.addEventListener("beforeunload", () => {
		document.body.removeEventListener("scroll", handleScroll)
	})
</script>

<script>
	import { $$ } from "@/lib/dom-selector"

	document.addEventListener("astro:page-load", () => {
		const isRootPage = window.location.pathname === "/"

		let currentLanguage = window.location.pathname.split("/")[1]
		if (currentLanguage === "es") {
			currentLanguage = ""
		} else if (currentLanguage !== "en") {
			currentLanguage = ""
		}

		const $navlinks = $$(".nav-link") as NodeListOf<HTMLAnchorElement>
		const $footerlinks = $$(".footer-link") as NodeListOf<HTMLAnchorElement>

		const adjustLink = ($link: HTMLAnchorElement) => {
			const href = $link.getAttribute("href") as string
			if (!isRootPage) {
				const redirectUrl = `/${currentLanguage}${href}`
				$link.setAttribute("href", redirectUrl)
			}
		}

		$navlinks.forEach(adjustLink)
		$footerlinks.forEach(adjustLink)
	})
</script>
