---
interface Props {
	href: string
	name: string
	id: string
	className?: string
	isMobile?: boolean
}

const { href, name, id, className, isMobile } = Astro.props
---

<a
	href={href}
	class:list={[
		"navigation-link relative inline-block p-0 text-left align-top font-title text-xl font-bold leading-[1.875rem] tracking-[.02rem] hover:text-tertiary hover:[outline:0]",
		className,
		isMobile ? "mobile-link" : "",
	]}
	id={id}
>
	{name}
</a>

<style>
	.active {
		color: hsl(var(--color-tertiary) / 1);
	}
</style>

<script>
	import { $, $$ } from "@/lib/dom-selector"

	const $navigationLinks = $$(
		"a.navigation-link:not(.mobile-link)"
	) as NodeListOf<HTMLAnchorElement>

	function isInViewport(element: Element) {
		const rect = element.getBoundingClientRect()
		return (
			rect.top <= (window.innerHeight || document.documentElement.clientHeight) && rect.bottom >= 0
		)
	}

	document.addEventListener("astro:page-load", () => {
		$navigationLinks.forEach((link) => {
			const id = link.getAttribute("href") as string

			link.addEventListener("click", (event) => {
				event.preventDefault()
				const $element = $(id)
				if ($element) {
					$element.scrollIntoView({ behavior: "smooth" })
					$navigationLinks.forEach((link) => {
						link.classList.remove("active")
					})
					link.classList.add("active")
				}
			})
		})

		document.body.addEventListener("scroll", () => {
			let isLinkActive = false

			$navigationLinks.forEach((link) => {
				const id = link.getAttribute("href") as string
				const $element = $(id)
				if ($element && isInViewport($element)) {
					$navigationLinks.forEach((link) => link.classList.remove("active"))
					link.classList.add("active")
					isLinkActive = true
				}
			})

			if (!isLinkActive) {
				$navigationLinks.forEach((link) => link.classList.remove("active"))
			}
		})
	})
</script>
